#region

using System.Text;
using System.Threading.Tasks;
using MarkBot.Repositories;
using MarkBot.SberClass;
using Microsoft.Extensions.DependencyInjection;
using TelegramBotBase.Base;
using TelegramBotBase.Form;

#endregion

namespace MarkBot.Forms;

public class BebraAuthForm : AutoCleanForm
{
    private readonly BebraClassClient _client = new();

    public string? Username { get; set; }
    public string? Password { get; set; }

    public override async Task Load(MessageResult message)
    {
        switch (message.BotCommand)
        {
            case "/back":
                await NavigationController.PopAsync();

                return;
        }

        if (!string.IsNullOrWhiteSpace(message.MessageText) && !message.IsBotCommand)
        {
            if (string.IsNullOrWhiteSpace(Username))
            {
                Username = message.MessageText;
            }
            else if (string.IsNullOrWhiteSpace(Password))
            {
                Password = message.MessageText;
            }
        }

        if (!string.IsNullOrWhiteSpace(Username) && !string.IsNullOrWhiteSpace(Password))
        {
            await Device.Send("*‚è≥ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞—é—Å—å...*");
            await TryAuthorize();
        }
        else
        {
            var sb = new StringBuilder();

            sb.AppendLine($"*üîó –õ–æ–≥–∏–Ω*: `{Username}`");
            sb.AppendLine($"*üîó –ü–∞—Ä–æ–ª—å*: `{Password}`");
            sb.AppendLine();
            sb.AppendLine("_üïä –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–≤—É–º—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏._");
            sb.AppendLine("üíº –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é - */back*.");
            sb.AppendLine();
            sb.AppendLine("ü§Ø *–ê —Ç—ã –Ω–µ —É–∫—Ä–∞–¥—ë—à—å –º–æ—é –º–æ—Ä—É?!*");
            sb.AppendLine(
                          "_–ù–µ—Ç. –Ø –Ω–µ –æ—Å—Ç–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ë–î, –∞ –ª–∏—à—å 2 —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —Ç–æ–∫–µ–Ω—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è._");

            await Device.Send(sb.ToString());
        }
    }

    public async Task TryAuthorize()
    {
        var res = await _client.Authorize(Username, Password);
        if (!res)
        {
            Username = null;
            Password = null;
            await Device.Send("*‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.*");
            return;
        }

        await Device.Send("*‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!*");

        using var scope = MainForm.ServiceProvider.CreateScope();
        var subscriberRepository = scope.ServiceProvider.GetRequiredService<SubscriberRepository>();
        await subscriberRepository.SetBebraClassData(Device.DeviceId, Username, Password);

        await Task.Delay(2000);

        await NavigationController.PopAsync();
    }
}
